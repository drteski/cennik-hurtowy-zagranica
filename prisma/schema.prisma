generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  active       Boolean
  name         String
  email        String         @unique
  password     String
  role         String         @default("user")
  country      Country[]
  userProducts UserProducts[]
}

model UserProducts {
  id             Int      @id @default(autoincrement())
  ids            Int[]
  variantIds     Int[]
  skus           String[]
  eans           String[]
  names          String[]
  activeVariants Boolean  @default(false)
  activeProducts Boolean  @default(false)
  country        Country  @relation(fields: [countryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  countryId      Int
  User           User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId         Int
}

model Country {
  id              Int            @id @default(autoincrement())
  iso             String
  name            String
  currency        String
  locale          String
  subject         String
  excludeProducts UserProducts[]
  users           User[]
}

model Product {
  uid           Int            @id
  id            Int
  active        Boolean        @default(false)
  variantId     Int
  activeVariant Boolean        @default(false)
  alias         String[]
  sku           String
  ean           String
  brand         String
  names         ProductName[]
  prices        ProductPrice[]
}

model ProductName {
  id        Int     @id @default(autoincrement())
  lang      String
  name      String
  product   Product @relation(fields: [productId], references: [uid], onUpdate: Cascade, onDelete: Cascade)
  productId Int
}

model ProductPrice {
  id        Int     @id @default(autoincrement())
  lang      String
  currency  String
  oldPrice  Float   @default(0)
  newPrice  Float   @default(0)
  product   Product @relation(fields: [productId], references: [uid], onUpdate: Cascade, onDelete: Cascade)
  productId Int
}
